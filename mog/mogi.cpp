#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
 //C
#include <stdio.h>
 //C++
#include <iostream>
#include <sstream>
#include <fstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./VideoTest {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./VideoTest -vid video.avi"                                           << endl
    << "or: ./VideoTest -vid /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo(char* videoFilename) {
    //create the capture object
    int fno = 0;
    //ofstream myfile;
    //myfile.open ("overlap.txt");
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        resize(frame, frame, Size(640, 480), 0, 0, INTER_LINEAR);
        fno++;
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        stringstream ss;
        // rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
        //           cv::Scalar(255,255,255), -1);
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        // putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
        //         FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        Mat element = getStructuringElement( MORPH_RECT, Size( 5,5 ), Point( -1,-1 ) );
        GaussianBlur(fgMaskMOG2, fgMaskMOG2, Size(21,21), 0, 0); 
        morphologyEx( fgMaskMOG2, fgMaskMOG2, MORPH_OPEN, element );
        threshold(fgMaskMOG2, fgMaskMOG2, 30, 255, THRESH_BINARY);
        Mat thresh;
        vector<vector<Point> > contours;
        vector<Vec4i> hierarchy;
        RNG rng(12345);
        findContours( fgMaskMOG2.clone(), contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0) );
        int min_area = 500;
        Scalar color( 255,255,255); 
        Rect bounding_rect;
        int sflag =0;
        for( int i = 0; i< contours.size(); i++ )
        {
            int flag =0;
            //  Find the area of contour
            double a=contourArea( contours[i],false);
            // bounding_rect=boundingRect(contours[i]); 
            min_area = 50;
            if(bounding_rect.y>=140)
                min_area = 2000;
            //for videosample5.mov
            // int jy= bounding_rect.width + bounding_rect.x;
            // if(jy < 300)
            //     min_area = 1000;
            // if(bounding_rect.x < 100)
            //     flag =1;
            //----------------------------------
            string text = "Foreground";
            if(a>min_area && flag==0){
                bounding_rect=boundingRect(contours[i]);
                //drawContours( frame, contours,i, color, FILLED,8,hierarchy);
                rectangle(frame, bounding_rect,  Scalar(0,255,0),2, 8,0);
                // myfile<<fno<<","<<bounding_rect.x<<","<<bounding_rect.y<<","<<bounding_rect.width<<","<<bounding_rect.height<<"\n";
                putText(frame, text, Point(400, 400), FONT_HERSHEY_PLAIN, 2,  Scalar(0,0,255,255), 2);
                sflag = 1;
            }
        }
        if(sflag==0)
        {
            string text = "Background";
            putText(frame, text, Point(400, 400), FONT_HERSHEY_PLAIN, 2,  Scalar(0,0,255,255), 2);
        }

        // myfile<<fno <<" "<<sflag<<"\n";
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //show the current frame and the fg masks
        // imshow("Frame", frame);
        // imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
    }
    //delete capture object
    capture.release();
    //myfile.close();
}
